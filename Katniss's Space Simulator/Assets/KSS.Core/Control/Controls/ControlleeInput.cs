using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace KSS.Control.Controls
{
    public abstract class ControlleeInput : Control { }

    /// <summary>
    /// Represents a control that responds to signals generated by a <see cref="ControllerOutput{T}"/>.
    /// </summary>
    public sealed class ControlleeInput<T> : ControlleeInput
    {
        internal Action<T> onInvoke;

        public ControllerOutput<T> Output { get; internal set; }

        /// <param name="signalResponse">The action to perform when a control signal is sent to this input.</param>
        public ControlleeInput( Action<T> signalResponse )
        {
            this.onInvoke = signalResponse;
        }

        public override IEnumerable<Control> GetConnections()
        {
            yield return Output;
        }

        public override bool TryConnect( Control other )
        {
            if( other is not ControllerOutput<T> output )
                return false;

            ControllerOutput<T>.Connect( this, output );
            return true;
        }

        public override bool TryDisconnect( Control other )
        {
            if( other is not ControllerOutput<T> output )
                return false;

            if( this.Output != output )
                return false;

            ControllerOutput<T>.Disconnect( this, output );
            return true;
        }

        public override bool TryDisconnectAll()
        {
            if( this.Output == null )
                return false;

            ControllerOutput<T>.Disconnect( this, this.Output );
            return true;
        }
    }
}